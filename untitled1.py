# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-VlDTIqs1ZZiFtEMVHQbqctw6XExMWuX
"""

import numpy as np
import torch
import torchvision
import matplotlib.pyplot as plt
import matplotlib.image as mpimg 
from time import time
from PIL import ImageTk, Image, ImageDraw

from PIL import Image
from torchvision.transforms import transforms
from google.colab import drive, files
drive.mount('/content/drive/')
path = '/content/drive/My Drive/Untitled.jpg'

image = Image.open(path)
pil2tensor = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,),(0.5,)),])
image = pil2tensor(image)
img = []
img.append(image[:,:343:10,228:571:10])
img.append(image[:,:343:10,672:1015:10])
img.append(image[:,343:686:10,228:571:10])
img.append(image[:,343:686:10,722:1065:10])
img.append(image[:,686:1029:10,128:471:10])
img.append(image[:,686:1029:10,672:1015:10])
img.append(image[:,1029:1372:10,128:471:10])
img.append(image[:,1029:1372:10,672:1015:10])
img.append(image[:,1372:1715:10,128:471:10])
img.append(image[:,1372:1715:10,672:1015:10])
img = torch.stack(img)
img.requires_grad = True
labels = torch.tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1.],requires_grad=True)

import torch.nn as nn
import torch.nn.functional as F
 
 
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(3, 6, 16)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 11)
        self.fc1 = nn.Linear(16 * 5 * 5, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)
        self.fc4 = nn.Linear(10, 1)
 
    def forward(self, x):
      x = F.relu(self.conv1(x))
      x = self.pool(F.relu(self.conv2(x)))
      x = x.view(-1, 16 * 5 * 5)
      x = F.relu(self.fc1(x))
      x = F.relu(self.fc2(x))
      x = F.relu(self.fc3(x))
      x = self.fc4(x)
      return x
net = Net()

import torch.optim as optim
optimizer = optim.SGD(net.parameters(), lr=0.003, momentum=0.9)
time0 = time()
sol = net(img)
criterion = nn.MSELoss()
for i in range(100):
  sol = net(img)
  labels = labels.view(1, 10)
  sol = sol.view(1, 10)
  loss = criterion(sol, labels)
  net.zero_grad()
  loss.backward()
  optimizer.step()
  print('Loss in Iteration No.' + str(i) + ' is ' + str(loss.item()))
print('Time taken:' + str((time() - time0)/60) + ' minutes')

path2 = '/content/drive/My Drive/steins-gate-rintarou.jpg'
imageq = Image.open(path2)
imageq = pil2tensor(imageq)
plt.imshow(imageq[0])
imageq = imageq[:,::6,::6]
imageq = imageq[:,8:43,8:43]
imageq = imageq.view(1, 3, 35, 35)
x = net(imageq)
if x[0][0] < 0.5:
  print('Rintaro Okabe from Steins;Gate')
else:
  print('Shinya Kogami from Psycho-Pass')

path3 = '/content/drive/My Drive/Kogami.jpg'
imageq2 = Image.open(path3)
imageq2 = pil2tensor(imageq2)
plt.imshow(imageq2[0])
imageq2 = imageq2[:,::10,::18]
imageq2 = imageq2[:,1:36,1:36]
imageq2 = imageq2.view(1, 3, 35, 35)
x = net(imageq2)
if x[0][0] < 0.5:
  print('Rintaro Okabe from Steins;Gate')
else:
  print('Shinya Kogami from Psycho-Pass')

path4 = '/content/drive/My Drive/Time_leap_machine.png'
imageq3 = Image.open(path4)
imageq3 = pil2tensor(imageq3)
plt.imshow(imageq3[0])
imageq3 = imageq3[0:3,80:430,460:810]
imageq3 = imageq3[:,::10,::10]
imageq3 = imageq3.view(1, 3,35, 35)
x = net(imageq3)
if x[0][0] < 0.5:
  print('Rintaro Okabe from Steins;Gate')
else:
  print('Shinya Kogami from Psycho-Pass')